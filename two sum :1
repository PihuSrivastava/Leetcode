#include <vector>
#include <unordered_map>
using namespace std;

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> numIndexMap; // value -> index mapping

        for (int i = 0; i < nums.size(); i++) {
            int complement = target - nums[i]; // the number we need

            // Check if complement exists in the map
            if (numIndexMap.find(complement) != numIndexMap.end()) {
                return {numIndexMap[complement], i};
            }

            // Store current number with its index
            numIndexMap[nums[i]] = i;
        }

        return {}; // just for completeness, won't happen per problem constraints
    }
};
